/// Generated by the Protocol Buffers 3.3.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.16
/// Source file "addressbook.proto"
/// Syntax "Proto2"
/*
import Foundation
import ProtocolBuffers


public struct AddressbookRoot {
    public static let `default` = AddressbookRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class Person : GeneratedMessage {

    public static func == (lhs: Person, rhs: Person) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
        fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
        fieldCheck = fieldCheck && (lhs.phones == rhs.phones)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class PhoneNumber : GeneratedMessage {

        public static func == (lhs: Person.PhoneNumber, rhs: Person.PhoneNumber) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasNumber == rhs.hasNumber) && (!lhs.hasNumber || lhs.number == rhs.number)
            fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var number:String! = nil
        public fileprivate(set) var hasNumber:Bool = false

        public fileprivate(set) var type:Person.PhoneType = Person.PhoneType.home
        public fileprivate(set) var hasType:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasNumber {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasNumber {
                try codedOutputStream.writeString(fieldNumber: 1, value:number)
            }
            if hasType {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:type.rawValue)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasNumber {
                serialize_size += number.computeStringSize(fieldNumber: 1)
            }
            if (hasType) {
                serialize_size += type.rawValue.computeEnumSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Person.PhoneNumber.Builder {
            return Person.PhoneNumber.classBuilder() as! Person.PhoneNumber.Builder
        }
        public func getBuilder() -> Person.PhoneNumber.Builder {
            return classBuilder() as! Person.PhoneNumber.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Person.PhoneNumber.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Person.PhoneNumber.Builder()
        }
        public func toBuilder() throws -> Person.PhoneNumber.Builder {
            return try Person.PhoneNumber.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Person.PhoneNumber) throws -> Person.PhoneNumber.Builder {
            return try Person.PhoneNumber.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasNumber {
                jsonMap["number"] = number
            }
            if hasType {
                jsonMap["type"] = type.toString()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Person.PhoneNumber {
            return try Person.PhoneNumber.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Person.PhoneNumber {
            return try Person.PhoneNumber.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasNumber {
                output += "\(indent) number: \(number) \n"
            }
            if (hasType) {
                output += "\(indent) type: \(type.description)\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasNumber {
                    hashCode = (hashCode &* 31) &+ number.hashValue
                }
                if hasType {
                     hashCode = (hashCode &* 31) &+ type.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Person.PhoneNumber"
        }
        override public func className() -> String {
            return "Person.PhoneNumber"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Person.PhoneNumber = Person.PhoneNumber()
            public func getMessage() -> Person.PhoneNumber {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var number:String {
                get {
                    return builderResult.number
                }
                set (value) {
                    builderResult.hasNumber = true
                    builderResult.number = value
                }
            }
            public var hasNumber:Bool {
                get {
                    return builderResult.hasNumber
                }
            }
            @discardableResult
            public func setNumber(_ value:String) -> Person.PhoneNumber.Builder {
                self.number = value
                return self
            }
            @discardableResult
            public func clearNumber() -> Person.PhoneNumber.Builder{
                builderResult.hasNumber = false
                builderResult.number = nil
                return self
            }
                public var type:Person.PhoneType {
                    get {
                        return builderResult.type
                    }
                    set (value) {
                        builderResult.hasType = true
                        builderResult.type = value
                    }
                }
                public var hasType:Bool{
                    get {
                        return builderResult.hasType
                    }
                }
            @discardableResult
                public func setType(_ value:Person.PhoneType) -> Person.PhoneNumber.Builder {
                  self.type = value
                  return self
                }
            @discardableResult
                public func clearType() -> Person.PhoneNumber.Builder {
                   builderResult.hasType = false
                   builderResult.type = .home
                   return self
                }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Person.PhoneNumber.Builder {
                builderResult = Person.PhoneNumber()
                return self
            }
            override public func clone() throws -> Person.PhoneNumber.Builder {
                return try Person.PhoneNumber.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Person.PhoneNumber {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Person.PhoneNumber {
                let returnMe:Person.PhoneNumber = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Person.PhoneNumber) throws -> Person.PhoneNumber.Builder {
                if other == Person.PhoneNumber() {
                    return self
                }
                if other.hasNumber {
                    number = other.number
                }
                if other.hasType {
                    type = other.type
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Person.PhoneNumber.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Person.PhoneNumber.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        number = try codedInputStream.readString()

                    case 16:
                        let valueInttype = try codedInputStream.readEnum()
                        if let enumstype = Person.PhoneType(rawValue:valueInttype){
                            type = enumstype
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueInttype))
                        }

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Person.PhoneNumber.Builder {
                let resultDecodedBuilder = Person.PhoneNumber.Builder()
                if let jsonValueNumber = jsonMap["number"] as? String {
                    resultDecodedBuilder.number = jsonValueNumber
                }
                if let jsonValueType = jsonMap["type"] as? String {
                    resultDecodedBuilder.type = try Person.PhoneType.fromString(jsonValueType)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Person.PhoneNumber.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Person.PhoneNumber.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



        //Enum type declaration start 

        public enum PhoneType:Int32, GeneratedEnum {
            case mobile = 0
            case home = 1
            case work = 2
            public func toString() -> String {
                switch self {
                case .mobile: return "MOBILE"
                case .home: return "HOME"
                case .work: return "WORK"
                }
            }
            public static func fromString(_ str:String) throws -> Person.PhoneType {
                switch str {
                case "MOBILE":    return .mobile
                case "HOME":    return .home
                case "WORK":    return .work
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .mobile: return ".mobile"
                case .home: return ".home"
                case .work: return ".work"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:PhoneType, rhs:PhoneType) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var id:Int32! = nil
    public fileprivate(set) var hasId:Bool = false

    public fileprivate(set) var email:String! = nil
    public fileprivate(set) var hasEmail:Bool = false

    public fileprivate(set) var phones:Array<Person.PhoneNumber>  = Array<Person.PhoneNumber>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        if !hasName {
            return false
        }
        if !hasId {
            return false
        }
        var isInitPhones:Bool = true
        for oneElementPhones in phones {
            if !oneElementPhones.isInitialized() {
                isInitPhones = false
                break 
            }
        }
        if !isInitPhones {
            return isInitPhones
        }
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 1, value:name)
        }
        if hasId {
            try codedOutputStream.writeInt32(fieldNumber: 2, value:id)
        }
        if hasEmail {
            try codedOutputStream.writeString(fieldNumber: 3, value:email)
        }
        for oneElementPhones in phones {
              try codedOutputStream.writeMessage(fieldNumber: 4, value:oneElementPhones)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 1)
        }
        if hasId {
            serialize_size += id.computeInt32Size(fieldNumber: 2)
        }
        if hasEmail {
            serialize_size += email.computeStringSize(fieldNumber: 3)
        }
        for oneElementPhones in phones {
            serialize_size += oneElementPhones.computeMessageSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Person.Builder {
        return Person.classBuilder() as! Person.Builder
    }
    public func getBuilder() -> Person.Builder {
        return classBuilder() as! Person.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Person.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Person.Builder()
    }
    public func toBuilder() throws -> Person.Builder {
        return try Person.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Person) throws -> Person.Builder {
        return try Person.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasName {
            jsonMap["name"] = name
        }
        if hasId {
            jsonMap["id"] = Int(id)
        }
        if hasEmail {
            jsonMap["email"] = email
        }
        if !phones.isEmpty {
            var jsonArrayPhones:Array<Dictionary<String,Any>> = []
            for oneValuePhones in phones {
                let ecodedMessagePhones = try oneValuePhones.encode()
                jsonArrayPhones.append(ecodedMessagePhones)
            }
            jsonMap["phones"] = jsonArrayPhones
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Person {
        return try Person.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Person {
        return try Person.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasName {
            output += "\(indent) name: \(name) \n"
        }
        if hasId {
            output += "\(indent) id: \(id) \n"
        }
        if hasEmail {
            output += "\(indent) email: \(email) \n"
        }
        var phonesElementIndex:Int = 0
        for oneElementPhones in phones {
            output += "\(indent) phones[\(phonesElementIndex)] {\n"
            output += try oneElementPhones.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            phonesElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasId {
                hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasEmail {
                hashCode = (hashCode &* 31) &+ email.hashValue
            }
            for oneElementPhones in phones {
                hashCode = (hashCode &* 31) &+ oneElementPhones.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Person"
    }
    override public func className() -> String {
        return "Person"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Person = Person()
        public func getMessage() -> Person {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> Person.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> Person.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        public var id:Int32 {
            get {
                return builderResult.id
            }
            set (value) {
                builderResult.hasId = true
                builderResult.id = value
            }
        }
        public var hasId:Bool {
            get {
                return builderResult.hasId
            }
        }
        @discardableResult
        public func setId(_ value:Int32) -> Person.Builder {
            self.id = value
            return self
        }
        @discardableResult
        public func clearId() -> Person.Builder{
            builderResult.hasId = false
            builderResult.id = nil
            return self
        }
        public var email:String {
            get {
                return builderResult.email
            }
            set (value) {
                builderResult.hasEmail = true
                builderResult.email = value
            }
        }
        public var hasEmail:Bool {
            get {
                return builderResult.hasEmail
            }
        }
        @discardableResult
        public func setEmail(_ value:String) -> Person.Builder {
            self.email = value
            return self
        }
        @discardableResult
        public func clearEmail() -> Person.Builder{
            builderResult.hasEmail = false
            builderResult.email = nil
            return self
        }
        public var phones:Array<Person.PhoneNumber> {
            get {
                return builderResult.phones
            }
            set (value) {
                builderResult.phones = value
            }
        }
        @discardableResult
        public func setPhones(_ value:Array<Person.PhoneNumber>) -> Person.Builder {
            self.phones = value
            return self
        }
        @discardableResult
        public func clearPhones() -> Person.Builder {
            builderResult.phones.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Person.Builder {
            builderResult = Person()
            return self
        }
        override public func clone() throws -> Person.Builder {
            return try Person.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Person {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Person {
            let returnMe:Person = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Person) throws -> Person.Builder {
            if other == Person() {
                return self
            }
            if other.hasName {
                name = other.name
            }
            if other.hasId {
                id = other.id
            }
            if other.hasEmail {
                email = other.email
            }
            if !other.phones.isEmpty  {
                 builderResult.phones += other.phones
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Person.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Person.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    name = try codedInputStream.readString()

                case 16:
                    id = try codedInputStream.readInt32()

                case 26:
                    email = try codedInputStream.readString()

                case 34:
                    let subBuilder = Person.PhoneNumber.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    phones.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Person.Builder {
            let resultDecodedBuilder = Person.Builder()
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueId = jsonMap["id"] as? Int {
                resultDecodedBuilder.id = Int32(jsonValueId)
            } else if let jsonValueId = jsonMap["id"] as? String {
                resultDecodedBuilder.id = Int32(jsonValueId)!
            }
            if let jsonValueEmail = jsonMap["email"] as? String {
                resultDecodedBuilder.email = jsonValueEmail
            }
            if let jsonValuePhones = jsonMap["phones"] as? Array<Dictionary<String,Any>> {
                var jsonArrayPhones:Array<Person.PhoneNumber> = []
                for oneValuePhones in jsonValuePhones {
                    let messageFromStringPhones = try Person.PhoneNumber.Builder.decodeToBuilder(jsonMap:oneValuePhones).build()

                    jsonArrayPhones.append(messageFromStringPhones)
                }
                resultDecodedBuilder.phones = jsonArrayPhones
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> Person.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Person.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class AddressBook : GeneratedMessage {

    public static func == (lhs: AddressBook, rhs: AddressBook) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.people == rhs.people)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var people:Array<Person>  = Array<Person>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        var isInitPeople:Bool = true
        for oneElementPeople in people {
            if !oneElementPeople.isInitialized() {
                isInitPeople = false
                break 
            }
        }
        if !isInitPeople {
            return isInitPeople
        }
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        for oneElementPeople in people {
              try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementPeople)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        for oneElementPeople in people {
            serialize_size += oneElementPeople.computeMessageSize(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> AddressBook.Builder {
        return AddressBook.classBuilder() as! AddressBook.Builder
    }
    public func getBuilder() -> AddressBook.Builder {
        return classBuilder() as! AddressBook.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return AddressBook.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return AddressBook.Builder()
    }
    public func toBuilder() throws -> AddressBook.Builder {
        return try AddressBook.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:AddressBook) throws -> AddressBook.Builder {
        return try AddressBook.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if !people.isEmpty {
            var jsonArrayPeople:Array<Dictionary<String,Any>> = []
            for oneValuePeople in people {
                let ecodedMessagePeople = try oneValuePeople.encode()
                jsonArrayPeople.append(ecodedMessagePeople)
            }
            jsonMap["people"] = jsonArrayPeople
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> AddressBook {
        return try AddressBook.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> AddressBook {
        return try AddressBook.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        var peopleElementIndex:Int = 0
        for oneElementPeople in people {
            output += "\(indent) people[\(peopleElementIndex)] {\n"
            output += try oneElementPeople.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            peopleElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementPeople in people {
                hashCode = (hashCode &* 31) &+ oneElementPeople.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "AddressBook"
    }
    override public func className() -> String {
        return "AddressBook"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:AddressBook = AddressBook()
        public func getMessage() -> AddressBook {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var people:Array<Person> {
            get {
                return builderResult.people
            }
            set (value) {
                builderResult.people = value
            }
        }
        @discardableResult
        public func setPeople(_ value:Array<Person>) -> AddressBook.Builder {
            self.people = value
            return self
        }
        @discardableResult
        public func clearPeople() -> AddressBook.Builder {
            builderResult.people.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> AddressBook.Builder {
            builderResult = AddressBook()
            return self
        }
        override public func clone() throws -> AddressBook.Builder {
            return try AddressBook.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> AddressBook {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> AddressBook {
            let returnMe:AddressBook = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:AddressBook) throws -> AddressBook.Builder {
            if other == AddressBook() {
                return self
            }
            if !other.people.isEmpty  {
                 builderResult.people += other.people
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> AddressBook.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> AddressBook.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder = Person.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    people.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> AddressBook.Builder {
            let resultDecodedBuilder = AddressBook.Builder()
            if let jsonValuePeople = jsonMap["people"] as? Array<Dictionary<String,Any>> {
                var jsonArrayPeople:Array<Person> = []
                for oneValuePeople in jsonValuePeople {
                    let messageFromStringPeople = try Person.Builder.decodeToBuilder(jsonMap:oneValuePeople).build()

                    jsonArrayPeople.append(messageFromStringPeople)
                }
                resultDecodedBuilder.people = jsonArrayPeople
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> AddressBook.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try AddressBook.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension Person: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Person> {
        var mergedArray = Array<Person>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Person? {
        return try Person.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Person {
        return try Person.Builder().mergeFrom(data: data, extensionRegistry:AddressbookRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Person {
        return try Person.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Person {
        return try Person.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Person {
        return try Person.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Person {
        return try Person.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Person {
        return try Person.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "id": return self.id
        case "email": return self.email
        case "phones": return self.phones
        default: return nil
        }
    }
}
extension Person.PhoneNumber: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Person.PhoneNumber> {
        var mergedArray = Array<Person.PhoneNumber>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Person.PhoneNumber? {
        return try Person.PhoneNumber.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Person.PhoneNumber {
        return try Person.PhoneNumber.Builder().mergeFrom(data: data, extensionRegistry:AddressbookRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Person.PhoneNumber {
        return try Person.PhoneNumber.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Person.PhoneNumber {
        return try Person.PhoneNumber.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Person.PhoneNumber {
        return try Person.PhoneNumber.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Person.PhoneNumber {
        return try Person.PhoneNumber.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Person.PhoneNumber {
        return try Person.PhoneNumber.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "number": return self.number
        case "type": return self.type
        default: return nil
        }
    }
}
extension Person.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "id": return self.id
            case "email": return self.email
            case "phones": return self.phones
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "id":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.id = newSubscriptValue
            case "email":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.email = newSubscriptValue
            case "phones":
                guard let newSubscriptValue = newSubscriptValue as? Array<Person.PhoneNumber> else {
                    return
                }
                self.phones = newSubscriptValue
            default: return
            }
        }
    }
}
extension Person.PhoneNumber.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "number": return self.number
            case "type": return self.type
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "number":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.number = newSubscriptValue
            case "type":
                guard let newSubscriptValue = newSubscriptValue as? Person.PhoneType else {
                    return
                }
                self.type = newSubscriptValue
            default: return
            }
        }
    }
}
extension AddressBook: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<AddressBook> {
        var mergedArray = Array<AddressBook>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> AddressBook? {
        return try AddressBook.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> AddressBook {
        return try AddressBook.Builder().mergeFrom(data: data, extensionRegistry:AddressbookRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> AddressBook {
        return try AddressBook.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> AddressBook {
        return try AddressBook.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> AddressBook {
        return try AddressBook.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> AddressBook {
        return try AddressBook.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> AddressBook {
        return try AddressBook.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "people": return self.people
        default: return nil
        }
    }
}
extension AddressBook.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "people": return self.people
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "people":
                guard let newSubscriptValue = newSubscriptValue as? Array<Person> else {
                    return
                }
                self.people = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
 */
